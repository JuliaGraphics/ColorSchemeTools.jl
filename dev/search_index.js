var documenterSearchIndex = {"docs":
[{"location":"functionindex/#Index","page":"Alphabetical function list","title":"Index","text":"","category":"section"},{"location":"functionindex/","page":"Alphabetical function list","title":"Alphabetical function list","text":"Modules = [ColorSchemeTools]\nOrder   = [:function, :type]","category":"page"},{"location":"functionindex/#ColorSchemeTools._FloatArray_to_RGB-Tuple{Any}","page":"Alphabetical function list","title":"ColorSchemeTools._FloatArray_to_RGB","text":" _FloatArray_to_RGB(cmap)\n\nConvert Nx3 Float64 array to N array of ColorTypes.RGB{Float64}.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._FloatArray_to_RGBA-Tuple{Any}","page":"Alphabetical function list","title":"ColorSchemeTools._FloatArray_to_RGBA","text":"_FloatArray_to_RGBA(cmap)\n\nConvert Nx3 Float64 array to array of N ColorTypes.RGBA{Float64}.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._RGBA_to_FloatArray-Tuple{Any}","page":"Alphabetical function list","title":"ColorSchemeTools._RGBA_to_FloatArray","text":"_RGBA_to_FloatArray(rgbmap)\n\nConvert array of N RGBA{Float64} to Nx3 Float64 array\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._RGBA_to_UInt32-Tuple{Any}","page":"Alphabetical function list","title":"ColorSchemeTools._RGBA_to_UInt32","text":"_RGBA_to_UInt32(rgb)\n\nConvert an array of RGB values to an array of UInt32 values for use as a colormap.\n\nUsage:\n\nuint32rgb = _RGBA_to_UInt32(rgbmap)\n\nArgument:\n\nrgbmap - Vector of ColorTypes.RGBA values\n\nReturns:\n\nuint32rgb, an array of UInt32 values packed with the 8 bit RGB values.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._RGB_to_FloatArray-Tuple{Any}","page":"Alphabetical function list","title":"ColorSchemeTools._RGB_to_FloatArray","text":"_RGB_to_FloatArray(rgbmap)\n\nConvert array of N RGB{Float64} to Nx3 Float64 array.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._cie76-NTuple{4, Array}","page":"Alphabetical function list","title":"ColorSchemeTools._cie76","text":"_cie76(L::Array, a::Array, b::Array, W::Array)\n\nCompute weighted Delta E between successive entries in a colormap using the CIE76 formula + weighting\n\nUsage: \n\ndeltaE = _cie76(L::Array, a::Array, b::Array, W::Array)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._ciede2000-NTuple{4, Array}","page":"Alphabetical function list","title":"ColorSchemeTools._ciede2000","text":"_ciede2000(L::Array, a::Array, b::Array, W::Array)\n\nCompute weighted Delta E between successive entries in a colormap using the CIEDE2000 formula + weighting\n\nUsage: \n\ndeltaE = _ciede2000(L::Array, a::Array, b::Array, W::Array)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._gaussfilt1d-Tuple{Array, Real}","page":"Alphabetical function list","title":"ColorSchemeTools._gaussfilt1d","text":"_gaussfilt1d(s::Array, sigma::Real)\n\nApply a 1D Gaussian filter to s. Filtering at the ends is done using zero padding.\n\nUsage:\n\nsm = _gaussfilt1d(s::Array, sigma::Real)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._interp1-Tuple{Any, Any, Any}","page":"Alphabetical function list","title":"ColorSchemeTools._interp1","text":"_interp1(x, y, xi)\n\nSimple 1D linear interpolation of an array of data\n\nUsage:  \n\nyi = _interp1(x, y, xi)\n\nArguments:  \n\nx - Array of coordinates at which y is defined\n\ny - Array of values at coordinates x\n\nxi - Coordinate locations at which you wish to interpolate y values\n\nReturns:   \n\nyi - Values linearly interpolated from y at xi\n\nInterpolates y, defined at values x, at locations xi and returns the corresponding values as yi. \n\nx is assumed increasing but not necessarily equi-spaced. xi values do not need to be sorted.\n\nIf any xi are outside the range of x, then the corresponding value of yi is set to the appropriate end value of y.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._lab_to_srgb-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"Alphabetical function list","title":"ColorSchemeTools._lab_to_srgb","text":"_lab_to_srgb(lab::AbstractMatrix{T}) where {T}\n\nConvert an Nx3 array of CIELAB values in a colormap to an Nx3 array of RGB values.  Function can also be used to convert a 3 channel CIELAB image to a 3 channel RGB image Note it appears that the Colors.convert() function uses a default white point of D65\n\nUsage:\n\nrgb = _lab_to_srgb(lab)\n\nArgument:\n\nlab - N x 3 array of CIELAB values of a 3 channel CIELAB image\n\nReturns:\n\nrgb - N x 3 array of RGB values or a 3 channel RGB image\n\nSee also: srgbto_lab\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._lab_to_srgb-Union{Tuple{Array{T, 3}}, Tuple{T}} where T","page":"Alphabetical function list","title":"ColorSchemeTools._lab_to_srgb","text":"_lab_to_srgb(lab::Array{T,3}) where {T}\n\nConvert a 3 channel Lab image to a 3 channel RGB image.\n\nUsage:\n\nrgb = _lab_to_srgb(lab)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._linearrgbmap","page":"Alphabetical function list","title":"ColorSchemeTools._linearrgbmap","text":"_linearrgbmap(C::Array, N::Int=256)\n\nLinear RGB colourmap from black to a specified color.\n\nUsage:\n\ncmap = _linearrgbmap(C, N)\n\nArguments:\n\nC - 3-vector specifying RGB colour\n\nN - Number of colourmap elements, defaults to 256\n\nReturns\n\ncmap - an N element ColorTypes.RGBA colourmap ranging from [0 0 0] to RGB colour C.\n\nYou should pass the result through equalize() to obtain uniform steps in perceptual lightness.\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#ColorSchemeTools._normalize_array-Tuple{Array}","page":"Alphabetical function list","title":"ColorSchemeTools._normalize_array","text":"_normalize_array(img::Array)\n\nOffsets and rescales elements of image so that the minimum value is 0 and the maximum value is 1.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._smooth-Union{Tuple{T}, Tuple{Vector{T}, Real, Bool}} where T<:Real","page":"Alphabetical function list","title":"ColorSchemeTools._smooth","text":"_smooth(L::Array{T,1}, sigma::Real, cyclic::Bool) where {T<:Real}\n\nSmooth an array of values but also ensure end values are not altered or, if the map is cyclic, ensures smoothing is applied across the end points in a cyclic manner.\n\nAssume input data is a column vector.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._srgb_to_lab-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"Alphabetical function list","title":"ColorSchemeTools._srgb_to_lab","text":"_srgb_to_lab(rgb::AbstractMatrix{T}) where {T}\n\nConvert an Nx3 array of RGB values in a colormap to an Nx3 array of CIELAB values.  Function can also be used to convert a 3 channel RGB image to a 3 channel CIELAB image Note it appears that the Colors.convert() function uses a default white point of D65\n\nUsage:\n\nlab = _srgb_to_lab(rgb)\n\nArgument:\n\nrgb - A N x 3 array of RGB values or a 3 channel RGB image.\n\nReturns:\n\n lab - A N x 3 array of Lab values of a 3 channel CIELAB image.\n\nSee also: labto_srgb\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._srgb_to_lab-Union{Tuple{Array{T, 3}}, Tuple{T}} where T","page":"Alphabetical function list","title":"ColorSchemeTools._srgb_to_lab","text":"_srgb_to_lab(rgb::Array{T, 3}) where {T}\n\nConvert a 3 channel RGB image to a 3 channel CIELAB image.\n\nUsage:  \n\nlab = _srgb_to_lab(rgb)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools._srgb_to_lab-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Alphabetical function list","title":"ColorSchemeTools._srgb_to_lab","text":"_srgb_to_lab(rgb::Vector{T}) where {T}\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.add_alpha","page":"Alphabetical function list","title":"ColorSchemeTools.add_alpha","text":"add_alpha(cs::ColorScheme, alpha::Real=0.5)\n\nMake a copy of the colorscheme cs with alpha opacity value alpha.\n\nExample\n\nMake a copy of the PuOr colorscheme and set every element of it to have alpha opacity 0.5\n\nadd_alpha(ColorSchemes.PuOr, 0.5)\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#ColorSchemeTools.add_alpha-Tuple{ColorScheme, AbstractRange}","page":"Alphabetical function list","title":"ColorSchemeTools.add_alpha","text":"add_alpha(cs::ColorScheme, r::Range)\n\nMake a copy of the colorscheme cs with alpha opacity values in the range r.\n\nExample\n\nMake a copy of the PuOr colorscheme, set the first element to have alpha opacity 0.5, the last element to have opacity 0.0, with intermediate elements taking values between 0.5 and 1.0.\n\nadd_alpha(ColorSchemes.PuOr, 0.5:0.1:1.0)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.add_alpha-Tuple{ColorScheme, Function}","page":"Alphabetical function list","title":"ColorSchemeTools.add_alpha","text":"add_alpha(cs::ColorScheme, f::Function)\n\nMake a copy of the colorscheme cs with alpha opacity values defined by the function.\n\nExample\n\nMake a copy of the PuOr colorscheme, set the opacity of each element to be the result of calling the function on the value. So at value 0.5, the opacity is 1.0, but it's 0.0 at either end.\n\nadd_alpha(ColorSchemes.PuOr, (n) -> sin(n * Ï€))\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.add_alpha-Tuple{ColorScheme, Vector}","page":"Alphabetical function list","title":"ColorSchemeTools.add_alpha","text":"add_alpha(cs::ColorScheme, alpha::Vector)\n\nMake a copy of the colorscheme cs with alpha opacity values in the vector alpha.\n\nExample\n\nMake a copy of the PuOr colorscheme, set the first element to have alpha opacity 1.0, the last element to have opacity 0.0, with intermediate elements taking values between 1.0 and 0.0.\n\nadd_alpha(ColorSchemes.PuOr, [1.0, 0.0])\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.colorscheme_to_image","page":"Alphabetical function list","title":"ColorSchemeTools.colorscheme_to_image","text":"colorscheme_to_image(cs, nrows=50, tilewidth=5)\n\nMake an image from a ColorScheme by repeating the colors in nrows rows, repeating each pixel tilewidth times.\n\nReturns the image as an array.\n\nExamples:\n\nusing FileIO\n\nimg = colorscheme_to_image(ColorSchemes.leonardo, 50, 200)\nsave(\"/tmp/cs_image.png\", img)\n\nsave(\"/tmp/blackbody.png\", colorscheme_to_image(ColorSchemes.blackbody, 10, 100))\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#ColorSchemeTools.colorscheme_to_text-Tuple{ColorScheme, String, String}","page":"Alphabetical function list","title":"ColorSchemeTools.colorscheme_to_text","text":"colorscheme_to_text(cscheme::ColorScheme, schemename, filename;\n    category=\"dutch painters\",   # category\n    notes=\"it's not really lost\" # notes\n)\n\nWrite a ColorScheme to a Julia text file.\n\nExample\n\ncolorscheme_to_text(ColorSchemes.vermeer,\n    \"the_lost_vermeer\",          # name\n    \"/tmp/the_lost_vermeer.jl\",  # file\n    category=\"dutch painters\",   # category\n    notes=\"it's not really lost\" # notes\n    )\n\nand read it back in with:\n\ninclude(\"/tmp/the_lost_vermeer.jl\")\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.colorscheme_weighted","page":"Alphabetical function list","title":"ColorSchemeTools.colorscheme_weighted","text":"colorscheme_weighted(colorscheme, weights, length)\n\nReturns a new ColorScheme of length length (default 50) where the proportion of each color in colorscheme is represented by the associated weight of each entry.\n\nExamples:\n\ncolorscheme_weighted(extract_weighted_colors(\"hokusai.jpg\")...)\ncolorscheme_weighted(extract_weighted_colors(\"filename00000001.jpg\")..., 500)\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#ColorSchemeTools.compare_colors","page":"Alphabetical function list","title":"ColorSchemeTools.compare_colors","text":"compare_colors(color_a, color_b, field = :l)\n\nCompare two colors, using the Luv colorspace. field defaults to luminance :l but could be :u or :v. Return true if the specified field of color_a is less than color_b.\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#ColorSchemeTools.convert_to_scheme-Tuple{ColorScheme, Any}","page":"Alphabetical function list","title":"ColorSchemeTools.convert_to_scheme","text":"convert_to_scheme(cscheme, img)\n\nConverts img from its current color values to use only the colors defined in the ColorScheme cscheme.\n\nimage = nonTransparentImg\nconvert_to_scheme(ColorSchemes.leonardo, image)\nconvert_to_scheme(ColorSchemes.Paired_12, image)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.equalize-Union{Tuple{Array{T}}, Tuple{T}} where T<:Colorant","page":"Alphabetical function list","title":"ColorSchemeTools.equalize","text":"equalize(cs::ColorScheme;\n    colormodel::Symbol=\"RGB\",\n    formula::String=\"CIE76\",\n    W::Array=[1.0, 0.0, 0.0],\n    sigma::Real=0.0,\n    cyclic::Bool=false)\n\nequalize(ca::Array{Colorant, 1}; \n    # same keywords \n    )\n\nEqualize colors in the colorscheme cs or the array of colors ca so that they are more perceptually uniform.\n\ncs is a ColorScheme\nca is an array of colors\ncolormodelis:RGBor:LAB`\nformula is \"CIE76\" or \"CIEDE2000\"\nW is a vector of three weights to be applied to the lightness, chroma, and hue components of the difference equation\nsigma is an optional Gaussian smoothing parameter\ncyclic is a Boolean flag indicating whether the colormap is cyclic\n\nReturns a colorscheme with the colors adjusted.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.extract","page":"Alphabetical function list","title":"ColorSchemeTools.extract","text":"extract(imfile, n=10, i=10, tolerance=0.01; shrink=n)\n\nextract() extracts the most common colors from an image from the image file imfile by finding n dominant colors, using i iterations. You can (and probably should) shrink larger images before running this function.\n\nReturns a ColorScheme.\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#ColorSchemeTools.extract_weighted_colors","page":"Alphabetical function list","title":"ColorSchemeTools.extract_weighted_colors","text":"extract_weighted_colors(imfile, n=10, i=10, tolerance=0.01; shrink = 2)\n\nExtract colors and weights of the clusters of colors in an image file. Returns a ColorScheme and weights.\n\nExample:\n\npal, wts = extract_weighted_colors(imfile, n, i, tolerance; shrink = 2)\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#ColorSchemeTools.get_indexed_list_color-Tuple{Any, Any}","page":"Alphabetical function list","title":"ColorSchemeTools.get_indexed_list_color","text":"get_indexed_list_color(indexedlist, n)\n\nGet the color at a point n given an indexed list of triples like this:\n\ngist_rainbow = (\n       (0.000,   (1.00, 0.00, 0.16)),\n       (0.030,   (1.00, 0.00, 0.00)),\n       (0.215,   (1.00, 1.00, 0.00)),\n       (0.400,   (0.00, 1.00, 0.00)),\n       (0.586,   (0.00, 1.00, 1.00)),\n       (0.770,   (0.00, 0.00, 1.00)),\n       (0.954,   (1.00, 0.00, 1.00)),\n       (1.000,   (1.00, 0.00, 0.75))\n    )\n\nTo make a ColorScheme from this type of list, use:\n\nmake_colorscheme(gist_rainbow)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.get_linear_segment_color-Tuple{Any, Any}","page":"Alphabetical function list","title":"ColorSchemeTools.get_linear_segment_color","text":"get_linear_segment_color(dict, n)\n\nGet the RGB color for value n from a dictionary of linear color segments.\n\nThis following is a dictionary where red increases from 0 to 1 over the bottom half, green does the same over the middle half, and blue over the top half:\n\ncdict = Dict(:red  => ((0.0,  0.0,  0.0),\n                       (0.5,  1.0,  1.0),\n                       (1.0,  1.0,  1.0)),\n            :green => ((0.0,  0.0,  0.0),\n                       (0.25, 0.0,  0.0),\n                       (0.75, 1.0,  1.0),\n                       (1.0,  1.0,  1.0)),\n            :blue =>  ((0.0,  0.0,  0.0),\n                       (0.5,  0.0,  0.0),\n                       (1.0,  1.0,  1.0)))\n\nThe value of RGB component at every value of n is defined by a set of tuples. In each tuple, the first number is x. Colors are linearly interpolated in bands between consecutive values of x; if the first tuple is given by (Z, A, B) and the second tuple by (X, C, D), the color of a point n between Z and X will be given by (n - Z) / (X - Z) * (C - B) + B.\n\nFor example, given an entry like this:\n\n:red  => ((0.0, 0.0, 0.0),\n          (0.5, 1.0, 1.0),\n          (1.0, 1.0, 1.0))\n\nand if n = 0.75, we return 1.0; 0.75 is between the second and third segments, but we'd already reached 1.0 (segment 2) when n was 0.5.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.image_to_swatch-Tuple{Any, Int64, Any}","page":"Alphabetical function list","title":"ColorSchemeTools.image_to_swatch","text":"image_to_swatch(imagefilepath, samples, destinationpath;\n    nrows=50,\n    tilewidth=5)\n\nExtract a ColorsSheme from the image in imagefilepath to a swatch image PNG in destinationpath. This just runs sortcolorscheme(), colorscheme_to_image(), and save() in sequence.\n\nSpecify the number of colors. You can also specify the number of rows, and how many times each color is repeated.\n\nimage_to_swatch(\"monalisa.jpg\", 10, \"/tmp/monalisaswatch.png\")\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.lerp","page":"Alphabetical function list","title":"ColorSchemeTools.lerp","text":"lerp((x, from_min, from_max, to_min=0.0, to_max=1.0)\n\nLinear interpolation of x between from_min and from_max.\n\nExample\n\nColorSchemeTools.lerp(128, 0, 256)\n0.5\n\n\n\n\n\n","category":"function"},{"location":"functionindex/#ColorSchemeTools.make_colorscheme-NTuple{4, Function}","page":"Alphabetical function list","title":"ColorSchemeTools.make_colorscheme","text":"make_colorscheme(f1::Function, f2::Function, f3::Function, f4::Function;\n    model    = :RGBA,\n    length   = 100,\n    category = \"\",\n    notes    = \"functional ColorScheme\")\n\nMake a colorscheme with transparency using functions. Each argument is a function that returns a value for the red, green, blue, and alpha components for the values between 0 and 1.\n\nmodel is the color model, and can be :RGBA, :HSVA, or :LCHabA.\n\nUse length keyword to set the number of colors in the colorscheme.\n\nThe default color mo            del is :RGBA, and the functions should return values in the appropriate range:\n\nf1 - [0.0 - 1.0]   - red\nf2 - [0.0 - 1.0]   - green\nf3 - [0.0 - 1.0]   - blue\nf4 - [0.0 - 1.0]   - alpha\n\nFor the :HSVA color model:\n\nf1 - [0.0 - 360.0] - hue\nf2 - [0.0 - 1.0]   - saturataion\nf3 - [0.0 - 1.0]   - value (brightness)\nf4 - [0.0 - 1.0]   - alpha\n\nFor the :LCHabA color model:\n\nf1 - [0.0 - 100.0] - luminance\nf2 - [0.0 - 100.0] - chroma\nf3 - [0.0 - 360.0] - hue\nf4 - [0.0 - 1.0]   - alpha\n\nExamples\n\ncsa = make_colorscheme1(\n    n -> red(get(ColorSchemes.leonardo, n)),\n    n -> green(get(ColorSchemes.leonardo, n)),\n    n -> blue(get(ColorSchemes.leonardo, n)),\n    n -> 1 - identity(n))\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.make_colorscheme-Tuple{Array, Any}","page":"Alphabetical function list","title":"ColorSchemeTools.make_colorscheme","text":"make_colorscheme(colorlist, steps)\n\nMake a new colorscheme consisting of the colors in the array colorlist.\n\nmake_colorscheme([RGB(1, 0, 0), HSB(285, 0.7, 0.7), colorant\"darkslateblue\"], 20)\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.make_colorscheme-Tuple{Dict}","page":"Alphabetical function list","title":"ColorSchemeTools.make_colorscheme","text":"make_colorscheme(dict;\n    length=100,\n    category=\"\",\n    notes=\"\")\n\nMake a new ColorScheme from a dictionary of linear-segment information. Calls get_linear_segment_color(dict, n) with n for every length value between 0 and 1.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.make_colorscheme-Tuple{Function, Function, Function}","page":"Alphabetical function list","title":"ColorSchemeTools.make_colorscheme","text":"make_colorscheme(f1::Function, f2::Function, f3::Function;\n    model    = :RGB,\n    length   = 100,\n    category = \"\",\n    notes    = \"functional ColorScheme\")\n\nMake a colorscheme using functions. Each argument is a function that returns a value for the red, green, and blue components for the values between 0 and 1.\n\nmodel is the color model, and can be :RGB, :HSV, or :LCHab.\n\nUse length keyword to set the number of colors in the colorscheme.\n\nThe default color model is :RGB, and the functions should return values in the appropriate range:\n\nf1 - [0.0 - 1.0]   - red\nf2 - [0.0 - 1.0]   - green\nf3 - [0.0 - 1.0]   - blue\n\nFor the :HSV color model:\n\nf1 - [0.0 - 360.0] - hue\nf2 - [0.0 - 1.0]   - saturataion\nf3 - [0.0 - 1.0]   - value (brightness)\n\nFor the :LCHab color model:\n\nf1 - [0.0 - 100.0] - luminance\nf2 - [0.0 - 100.0] - chroma\nf3 - [0.0 - 360.0] - hue\n\nExample\n\nMake a colorscheme with the red component defined as a sine curve running  from 0 to Ï€ and back to 0, the green component is always 0, and the blue component starts at Ï€ and goes to 0 at 0.5 (it's clamped to 0 after that).\n\nmake_colorscheme(n -> sin(n * Ï€), n -> 0, n -> cos(n * Ï€))\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.make_colorscheme-Tuple{Tuple}","page":"Alphabetical function list","title":"ColorSchemeTools.make_colorscheme","text":"make_colorscheme(indexedlist;\n    length=length(indexedlist),\n    category=\"\",\n    notes=\"\")\n\nMake a ColorScheme using an 'indexed list' like this:\n\ngist_rainbow = (\n       (0.000, (1.00, 0.00, 0.16)),\n       (0.030, (1.00, 0.00, 0.00)),\n       (0.215, (1.00, 1.00, 0.00)),\n       (0.400, (0.00, 1.00, 0.00)),\n       (0.586, (0.00, 1.00, 1.00)),\n       (0.770, (0.00, 0.00, 1.00)),\n       (0.954, (1.00, 0.00, 1.00)),\n       (1.000, (1.00, 0.00, 0.75))\n)\n\nmake_colorscheme(gist_rainbow)\n\nThe first element of each item is the point on the colorscheme.\n\nUse length keyword to set the number of colors in the colorscheme.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.sineramp-Tuple{Any, Any}","page":"Alphabetical function list","title":"ColorSchemeTools.sineramp","text":"sineramp(rows, cols;\n        amplitude = 12.5,\n        wavelength = 8,\n        p = 2)\n\nGenerate a rows Ã— cols array of values which show a sine wave with decreasing amplitude from top to bottom.\n\nUsage:\n\nusing Images\nscheme = ColorSchemes.dracula\nimg = Gray.(sineramp(256, 512, amp = 12.5, wavelen = 8, p = 2))\ncimg = zeros(RGB, 256, 512)\nfor e in eachindex(img)\n    cimg[e] = get(mscheme, img[e])\nend\ncimg\n\nThe default wavelength is 8 pixels. On a computer monitor with a nominal pixel pitch of 0.25mm this corresponds to a wavelength of 2mm. With a monitor viewing distance of 600mm this corresponds to 0.19 degrees of viewing angle or approximately 5.2 cycles per degree. This falls within the range of spatial frequencies (3-7 cycles per degree) at which most people have maximal contrast sensitivity to a sine wave grating (this varies with mean luminance). A wavelength of 8 pixels is also sufficient to provide a reasonable discrete representation of a sine wave. The aim is to present a stimulus that is well matched to the performance of the human visual system so that what we are primarily evaluating is the colorscheme's perceptual contrast and not the visual performance of the viewer.\n\nThe default amplitude is set at 12.5, so that from peak to trough we have a local feature of magnitude 25. This is approximately 10% of the 256 levels in a typical colorscheme. It is not uncommon for colorschemes to have perceptual flat spots that can hide features of this magnitude.\n\nThe width of the image is adjusted so that we have an integer number of cycles of the sinewave. This helps should one be using the test image to evaluate a cyclic colorscheme. However you will still see a slight cyclic discontinuity at the top of the image, though this will disappear at the bottom.\n\n\n\n\n\n","category":"method"},{"location":"functionindex/#ColorSchemeTools.sortcolorscheme","page":"Alphabetical function list","title":"ColorSchemeTools.sortcolorscheme","text":"sortcolorscheme(colorscheme::ColorScheme, field; kwargs...)\n\nSort (non-destructively) a colorscheme using a field of the LUV colorspace.\n\nThe less than function is lt = (x,y) -> compare_colors(x, y, field).\n\nThe default is to sort by the luminance field :l but could be by :u or :v.\n\nReturns a new ColorScheme.\n\n\n\n\n\n","category":"function"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"using ColorSchemeTools\ninclude(joinpath(dirname(pathof(ColorSchemeTools)), \"..\", \"docs/\", \"displayschemes.jl\"))\n#=\nthis provides defines:\n- draw_rgb_levels(cs::ColorScheme, w=800, h=500, filename=\"/tmp/rgb-levels.svg\")\n- draw_transparent(cs::ColorScheme, csa::ColorScheme, w=800, h=500, filename=\"/tmp/transparency-levels.svg\")\ndraw_lightness_swatch(cs::ColorScheme, width = 800, height = 150; name = \"\")\n=# ","category":"page"},{"location":"equalizing/#Equalizing-color-constrasts","page":"Equalizing colorschemes","title":"Equalizing color constrasts","text":"","category":"section"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"The equalize() function equalizes the contrasts between colors of a colorscheme.","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"note: Note\nThis function is derived from the work of Peter Kovesi in  PerceptualColorMaps. You can find the original code there. It's copied here because Peter has retired from coding, and the package is not being maintained.","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"In the following example, the first image is the original colorscheme sampled 101 times. The second image shows the colors after they've been passed through equalize().","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"cs = ColorScheme([colorant\"yellow\", colorant\"red\"]) \n# sample \norigcolors = get(cs, 0:0.01:1)\n# return a new colorscheme based on the colors in cs \nnewcs = equalize(origcolors) \n# sample\nnewcolors = get(newcs, 0:0.01:1)","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"cs = ColorScheme([colorant\"yellow\", colorant\"red\"]) # hide\n# linear interpolation, not perceptually uniform # hide\norigcolors = get(cs, 0:0.01:1) # hide","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"cs = ColorScheme([colorant\"yellow\", colorant\"red\"]) # hide\n# linear interpolation, not perceptually uniform # hide\norigcolors = get(cs, 0:0.01:1)  # hide\n# generate corrected colormap: # hide\nnewcs = equalize(origcolors, colormodel=:RGB, sigma=0.0, formula=\"CIEDE2000\", W=[1, 0, 0]) # hide\nnewcolors = get(newcs, 0:0.01:1) # hide","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"You should be able to see the difference between the two images: the original colorscheme (top) uses simple linear interpolation, the modified scheme (below) shows the adjusted scheme, with smoother transitions in the red shades.","category":"page"},{"location":"equalizing/#Testing-a-colorscheme-with-sineramp()","page":"Equalizing colorschemes","title":"Testing a colorscheme with sineramp()","text":"","category":"section"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"Ideally, for a colorscheme to be effective, the perceptual contrast along the colors should be constant. Some colorschemes are better than others!","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"Try testing your favourite colorscheme on the image generated with sineramp(). This function generates an array where the values consist of a sine wave superimposed on a ramp function. The amplitude of the sine wave is modulated from its full value at the top of the array to 0 at the bottom.","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"When a colorscheme is used to render the array as a color image, we're hoping to see the sine wave uniformly visible across the image from left to right. We also want the contrast level, the distance down the image at which the sine wave remains discernible, to be uniform across the image. At the very bottom of the image, where the sine wave amplitude is 0, we just have a linear ramp which simply reproduces the colors in the colorscheme. Here the underlying data is a featureless ramp, so we should not perceive any identifiable features across the bottom of the image.","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"Here's a comparison between the jet and the rainbow_bgyr_35_85_c72_n256 colorschemes:","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"using Images, ColorSchemes, ColorSchemeTools # hide\nscheme = ColorSchemes.jet\nimg = Gray.(sineramp(150, 800, amplitude = 12.5, wavelength=8, p=2)) \ncimg = zeros(RGB, 150, 800)\nfor e in eachindex(img)\n    cimg[e] = get(scheme, img[e])\nend\ncimg","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"using Images, ColorSchemes, ColorSchemeTools # hide\nscheme = ColorSchemes.rainbow_bgyr_35_85_c72_n256\nimg = Gray.(sineramp(150, 800, amplitude = 12.5, wavelength=8, p=2)) \ncimg = zeros(RGB, 150, 800)\nfor e in eachindex(img)\n    cimg[e] = get(scheme, img[e])\nend\ncimg","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"You can hopefully see that the jet image is patchy; the rainbow_bgyr_35_85_c72_n256 shows the sinuous rippling consistently.","category":"page"},{"location":"equalizing/#Options-for-equalize()","page":"Equalizing colorschemes","title":"Options for equalize()","text":"","category":"section"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"The equalize function's primary use is for the correction of colorschemes. ","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"The perceptual contrast is very much dominated by the contrast in colour lightness values along the map. This function attempts to equalise the chosen perceptual contrast measure along a colorscheme by stretching and/or compressing sections of the colorscheme.","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"There are limitations to what this function can correct.  When applied to some colorschemes such as jet, hsv, and cool, you might see colour discontinuity artifacts, because these colorschemes have segments that are nearly constant in lightness. ","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"However, the function can succesfully fix up hot, winter, spring and autumn colorschemes. If you do see colour discontinuities in the resulting colorscheme, try changing W from [1, 0, 0] to [1, 1, 1], or some intermediate weighting of [1, 0.5, 0.5], say.","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"The equalize() function takes either a ColorScheme argument or an array of colors. The following keyword arguments are available:","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"colormodel is :RGB or :LAB indicating the type of data (use :RGB unless the ColorScheme contains LAB color definitions)\nformula is \"CIE76\" or \"CIEDE2000\"\nW is 3-vector of weights to be applied to the lightness, chroma and hue components of the difference equation\nsigma is an optional Gaussian smoothing parameter\ncyclic is a Boolean flag indicating whether the colormap is cyclic. This affects how smoothing is applied at the end points.","category":"page"},{"location":"equalizing/#Formulae","page":"Equalizing colorschemes","title":"Formulae","text":"","category":"section"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"The CIE76 and CIEDE2000 colour difference formulae were developed for much lower spatial frequencies than we are typically interested in. Neither is ideal for our application. The main thing to note is that at fine spatial frequencies perceptual contrast is dominated by lightness difference, chroma and hue are relatively unimportant.","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"Neither CIE76 or CIEDE2000 difference measures are ideal for the high spatial frequencies that we are interested in.  Empirically I find that CIEDE2000 seems to give slightly better results on colormaps where there is a significant lightness gradient (this applies to most colormaps). In this case you would be using a weighting vector W = [1, 0, 0].  For isoluminant, or low lightness gradient colormaps where one is using a weighting vector W = [1, 1, 1] CIE76 should be used as the CIEDE2000 chroma correction is inapropriate for the spatial frequencies we are interested in.","category":"page"},{"location":"equalizing/#The-Weighting-vector-W","page":"Equalizing colorschemes","title":"The Weighting vector W","text":"","category":"section"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"The CIEDE2000 colour difference formula incorporates the scaling parameters kL, kC, kH in the demonimator of the lightness, chroma, and hue difference components respectively. The 3 components of W correspond to the reciprocal of these 3 parameters. (I do not know why they chose to put kL, kC, kH in the denominator. If you wanted to ignore, say, the chroma component you would have to set kC to Inf, rather than setting W[2] to 0 which seems more sensible to me). If you are using CIE76 then W[2] amd W[3] are applied to the differences in a and b.  In this case you should ensure W[2] = W[3].  ","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"In general, for the spatial frequencies of interest to us, lightness differences are overwhelmingly more important than chroma or hue and W should be set to [1, 0, 0]","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"For colormaps with a significant range of lightness, use:","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"formula = \"CIE76\" or \"CIEDE2000\"\nW = [1, 0, 0] Only correct for lightness\nsigma = 5 - 7","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"For isoluminant or low lightness gradient colormaps use:","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"formula = \"CIE76\"\nW = [1, 1, 1]  Correct for colour and lightness","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"sigma = 5 - 7","category":"page"},{"location":"equalizing/#Smoothing-parameter-sigma","page":"Equalizing colorschemes","title":"Smoothing parameter sigma","text":"","category":"section"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"The output will have lightness values of constant slope magnitude. However, it is possible that the sign of the slope may change, for example at the midpoint of a bilateral colorscheme.  This slope discontinuity of lightness can induce a false apparent feature in the colorscheme.  A smaller effect is also occurs for slope discontinuities in a and b.  For such colorschemes it can be useful to introduce a small amount of _smoothing of the Lab values to soften the transition of sign in the slope to remove this apparent feature.  However in doing this one creates a small region of suppressed luminance contrast in the colorscheme which induces a 'blind spot' that compromises the visibility of features should they fall in that data range.  ccordingly the smoothing should be kept to a minimum. A value of sigma in the range 5 to 7 in a 256 element colorscheme seems about right.  As a guideline sigma should not be more than about 1/25 of the number of entries in the colormap, preferably less.","category":"page"},{"location":"equalizing/","page":"Equalizing colorschemes","title":"Equalizing colorschemes","text":"Reference: Peter Kovesi. Good ColorMaps: How to Design Them. arXiv:1509.03700 [cs.GR] 2015","category":"page"},{"location":"convertingimages/#Converting-images","page":"Converting image colors","title":"Converting images","text":"","category":"section"},{"location":"convertingimages/#Convert-image-from-one-scheme-to-another","page":"Converting image colors","title":"Convert image from one scheme to another","text":"","category":"section"},{"location":"convertingimages/","page":"Converting image colors","title":"Converting image colors","text":"It's possible to convert an image using one color scheme to use another.","category":"page"},{"location":"convertingimages/","page":"Converting image colors","title":"Converting image colors","text":"The function convert_to_scheme() returns a new image in which each pixel from the provided image is mapped to its closest matching color in the provided scheme. See ColorSchemes's getinverse() function for more details on how this works.","category":"page"},{"location":"convertingimages/","page":"Converting image colors","title":"Converting image colors","text":"In the following figure, the Julia logo is converted to use a ColorScheme with no black or white:","category":"page"},{"location":"convertingimages/","page":"Converting image colors","title":"Converting image colors","text":"using FileIO, ColorSchemes, ColorSchemeTools, Images\n\nimg = load(\"julia-logo-square.png\")\nimg_rgb = RGB.(img) # get rid of alpha channel\nconvertedimage = convert_to_scheme(ColorSchemes.PiYG_4, img_rgb)\n\nsave(\"original.png\",  img)\nsave(\"converted.png\", convertedimage)","category":"page"},{"location":"convertingimages/","page":"Converting image colors","title":"Converting image colors","text":"(Image: \"julia logo converted\")","category":"page"},{"location":"convertingimages/","page":"Converting image colors","title":"Converting image colors","text":"Notice how the white was matched by the color right at the boundary of the light purple and pale green.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"\nusing ColorSchemeTools\n\ninclude(joinpath(dirname(pathof(ColorSchemeTools)), \"..\", \"docs/\", \"displayschemes.jl\"))\n\n#=\n\nColorSchemeTools/docs/displayschemes.jl defines:\n\n- draw_rgb_levels(cs::ColorScheme, w=800, h=500, filename=\"/tmp/rgb-levels.svg\")\n\n- draw_transparent(cs::ColorScheme, csa::ColorScheme, w=800, h=500, filename=\"/tmp/transparency-levels.svg\")\n\n=# ","category":"page"},{"location":"makingschemes/#Making-colorschemes","page":"Making colorschemes","title":"Making colorschemes","text":"","category":"section"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"note: Note\nThe diagrams in this section show: the colors of a colorscheme as individual swatches along the top; the changing RGBA curves in the middle; and a continuously-sampled gradient below.","category":"page"},{"location":"makingschemes/#Making-simple-colorschemes","page":"Making colorschemes","title":"Making simple colorschemes","text":"","category":"section"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"Colors.jl provides a method for range() that accepts colorants:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"using ColorSchemes, Colors # hide\ncs = ColorScheme(range(RGB(1, 0, 0), stop = colorant\"blue\", length=15),\n        \"gradient\", \"red to blue 15\")\ndraw_rgb_levels(cs, 800, 200, :svg) # hide","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"You can make a new colorscheme by building an array of colors.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The ColorSchemeTools function make_colorscheme() lets you build more elaborate colorschemes. You can supply the color specifications using different methods, depending on the arguments you supply:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"a list of colors and a number specifying the length\na dictionary of linear segments\nan 'indexed list' of RGB values\na group of Julia functions that generate values between 0 and 1 for the RGB levels","category":"page"},{"location":"makingschemes/#List-of-colors","page":"Making colorschemes","title":"List of colors","text":"","category":"section"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"Given a list of colors, use make_colorscheme() to create a new colorscheme with n steps.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"For example, given an array of various colorants:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"roygbiv = [\n    colorant\"red\",\n    colorant\"orange\",\n    colorant\"yellow\",\n    colorant\"green\",\n    colorant\"blue\",\n    colorant\"indigo\",\n    colorant\"violet\"\n]","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"you can use make_colorscheme(cols, 10) to create a colorscheme with 10 steps:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"roygbiv = [ # hide\n    colorant\"red\", # hide\n    colorant\"orange\", # hide\n    colorant\"yellow\", # hide\n    colorant\"green\", # hide\n    colorant\"blue\", # hide\n    colorant\"indigo\", # hide\n    colorant\"violet\" # hide\n] # hide\nscheme = make_colorscheme(roygbiv, 10)\ndraw_rgb_levels(scheme, 800, 200, :svg) # hide","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"If you increase the number of steps, the interpolations are smoother. Here it is with 200 steps (shown in the top bar):","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"roygbiv = [ # hide\n    colorant\"red\", # hide\n    colorant\"orange\", # hide\n    colorant\"yellow\", # hide\n    colorant\"green\", # hide\n    colorant\"blue\", # hide\n    colorant\"indigo\", # hide\n    colorant\"violet\" # hide\n] # hide\nscheme = make_colorscheme(roygbiv, 200)\ndraw_rgb_levels(scheme, 800, 200, :svg)","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"You can supply the colors in any format, as long as it's a Colorant:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cols = Any[\n    RGB(0, 0, 1),\n    Gray(0.5),\n    HSV(50., 0.7, 1.),\n    Gray(0.4),\n    LCHab(54, 105, 40),\n    HSV(285., 0.9, 0.8),\n    colorant\"#FFEEFF\",\n    colorant\"hotpink\",\n]\nscheme = make_colorscheme(cols, 8)\ndraw_rgb_levels(scheme, 800, 200, :svg)","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The Any array was necessary only because of the presence of the Gray(0..5) element. If all the elements are colorants, you can use [] or Colorant[].","category":"page"},{"location":"makingschemes/#Linearly-segmented-colors","page":"Making colorschemes","title":"Linearly-segmented colors","text":"","category":"section"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"A linearly-segmented color dictionary looks like this:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cdict = Dict(:red   => ((0.0,  0.0,  0.0),\n                        (0.5,  1.0,  1.0),\n                        (1.0,  1.0,  1.0)),\n             :green => ((0.0,  0.0,  0.0),\n                        (0.25, 0.0,  0.0),\n                        (0.75, 1.0,  1.0),\n                        (1.0,  1.0,  1.0)),\n             :blue  => ((0.0,  0.0,  0.0),\n                        (0.5,  0.0,  0.0),\n                        (1.0,  1.0,  1.0)))","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"This specifies that red increases from 0 to 1 over the bottom half, green does the same over the middle half, and blue over the top half.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The triplets aren't RGB values... For each channel, the first number in each tuple are points on the 0 to 1 brightness scale, and should gradually increase. The second and third values determine the intensity values at that point.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The change of color between point p1 and p2 is defined by b and c:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":":red => (\n         ...,\n         (p1, a, b),\n         (p2, c, d),\n         ...\n         )","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"If a and b (or c and d) aren't the same, the color will abruptly jump. Notice that the very first a and the very last d aren't used.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"To create a new colorscheme from a suitable dictionary in this format, run make_colorscheme().","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cdict = Dict(:red  => ((0.0,  0.0,  0.0),\n                       (0.5,  1.0,  1.0),\n                       (1.0,  1.0,  1.0)),\n            :green => ((0.0,  0.0,  0.0),\n                       (0.25, 0.0,  0.0),\n                       (0.75, 1.0,  1.0),\n                       (1.0,  1.0,  1.0)),\n            :blue =>  ((0.0,  0.0,  0.0),\n                       (0.5,  0.0,  0.0),\n                       (1.0,  1.0,  1.0))) # hide\nscheme = make_colorscheme(cdict)\ndraw_rgb_levels(scheme, 800, 200, :svg) # hide","category":"page"},{"location":"makingschemes/#Indexed-list-color-schemes","page":"Making colorschemes","title":"Indexed-list color schemes","text":"","category":"section"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The data to define an 'indexed list' colorscheme looks like this:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"terrain = (\n           (0.00, (0.2, 0.2,  0.6)),\n           (0.15, (0.0, 0.6,  1.0)),\n           (0.25, (0.0, 0.8,  0.4)),\n           (0.50, (1.0, 1.0,  0.6)),\n           (0.75, (0.5, 0.36, 0.33)),\n           (1.00, (1.0, 1.0,  1.0))\n          )","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The first item of each element is the location between 0 and 1, the second specifies the RGB values at that point.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The make_colorscheme(indexedlist) function makes a new colorscheme from such an indexed list.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"Use the length keyword to specify how many colors are used in the colorscheme.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"For example:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"terrain_data = (\n        (0.00, (0.2, 0.2, 0.6)),\n        (0.15, (0.0, 0.6, 1.0)),\n        (0.25, (0.0, 0.8, 0.4)),\n        (0.50, (1.0, 1.0, 0.6)),\n        (0.75, (0.5, 0.36, 0.33)),\n        (1.00, (1.0, 1.0, 1.0)))\nterrain = make_colorscheme(terrain_data, length = 50)\ndraw_rgb_levels(terrain, 800, 200, :svg)","category":"page"},{"location":"makingschemes/#Functional-color-schemes","page":"Making colorschemes","title":"Functional color schemes","text":"","category":"section"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The colors in a â€˜functionalâ€™ colorscheme are produced by three functions that calculate the color values at each point on the colorscheme.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The make_colorscheme() function applies the first supplied function at each point on the colorscheme for the red values, the second function for the green values, and the third for the blue. You can use defined functions or supply anonymous ones.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"Values produced by the functions are clamped to 0.0 and 1.0 before theyâ€™re converted to RGB values.","category":"page"},{"location":"makingschemes/#Examples","page":"Making colorschemes","title":"Examples","text":"","category":"section"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The first example returns a smooth black to white gradient, because the identity() function gives back as good as it gets.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"fscheme = make_colorscheme(identity, identity, identity)\ndraw_rgb_levels(fscheme, 800, 200, :svg)","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The next example uses the sin() function on values from 0 to Ï€ to control the red, and the cos() function from 0 to Ï€ to control the blue. The green channel is flat-lined.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"fscheme = make_colorscheme(n -> sin(n*Ï€), n -> 0, n -> cos(n*Ï€))\ndraw_rgb_levels(fscheme, 800, 200, :svg)","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"You can generate stepped gradients by controlling the numbers. Here, each point on the scheme is nudged to the nearest multiple of 0.1.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"fscheme = make_colorscheme(\n        n -> round(n, digits=1),\n        n -> round(n, digits=1),\n        n -> round(n, digits=1), length=10)\ndraw_rgb_levels(fscheme, 800, 200, :svg)","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The next example sinusoidally sends the red channel from black to red and back again.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"fscheme = make_colorscheme(n -> sin(n * Ï€), n -> 0, n -> 0)\ndraw_rgb_levels(fscheme, 800, 200, :svg)","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"The next example produces a striped colorscheme as the rippling sine waves continually change phase:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"ripple7(n)  = sin(Ï€ * 7n)\nripple13(n) = sin(Ï€ * 13n)\nripple17(n) = sin(Ï€ * 17n)\nfscheme = make_colorscheme(ripple7, ripple13, ripple17, length=80)\ndraw_rgb_levels(fscheme, 800, 200, :svg)","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"If you're creating a scheme by generating LCHab colors, your functions should convert values between 0 and 1 to values between 0 and 100 (luminance and chroma) or 0 to 360 (hue).","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"\nf1(n) = 180 + 180sin(2Ï€ * n)\nf2(n) = 50 + 20(0.5 - abs(n - 0.5))\nfscheme = make_colorscheme(n -> 50, f2, f1,\n    length=80,\n    model=:LCHab)\ndraw_rgb_levels(fscheme, 800, 200, :svg)","category":"page"},{"location":"makingschemes/#Alpha-opacity-colorschemes","page":"Making colorschemes","title":"Alpha opacity colorschemes","text":"","category":"section"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"Usually, colorschemes are RGB values with no alpha values. Use add_alpha() to add alpha opacity values to the colors in the colorschemes. ","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"In the illustrations, the top row shows the original colorscheme, the bottom row shows the modified colorscheme drawn over a checkerboard pattern to show the alpha opacity.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"You can make a new colorscheme where every color now has a specific alpha opacity value:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cs = ColorSchemes.PRGn_10\ncsa = add_alpha(cs, 0.8)\ndraw_transparent(cs, csa, 800, 200, :svg) # hide","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cs = ColorSchemes.PRGn_10 # hide\ncsa = add_alpha(cs, 0.8)  # hide\ndraw_rgb_levels(csa, 800, 200, :svg) # hide","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"You can specify alpha values using a range:","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cs = ColorSchemes.lisbon10\ncsa = add_alpha(cs, 0.3:0.1:1.0)\ndraw_transparent(cs, csa, 800, 200, :svg)  # hide","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cs = ColorSchemes.lisbon10 # hide\ncsa = add_alpha(cs, 0.3:0.1:1.0) # hide\ndraw_rgb_levels(csa, 800, 200, :svg) # hide","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"Or you can specify alpha values using a function that returns a value for every value between 0 and 1. In the next example the opacity varies from 1.0 to 0.0 and back to 1.0 again, as the colorscheme index goes from 0 to 1; at point 0.5, abs(cos(0.5 * Ï€)) is 0.0, so the colorscheme is completely transparent at that point.","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cs = ColorSchemes.PuOr\ncsa = add_alpha(cs, (n) -> abs(cos(n * Ï€)))\ndraw_transparent(cs, csa, 700, 200, :svg)","category":"page"},{"location":"makingschemes/","page":"Making colorschemes","title":"Making colorschemes","text":"cs = ColorSchemes.PuOr # hide\ncsa = add_alpha(cs, (n) -> abs(cos(n * Ï€))) # hide\ndraw_rgb_levels(csa, 800, 200, :svg) # hide","category":"page"},{"location":"#Introduction-to-ColorSchemeTools","page":"Introduction","title":"Introduction to ColorSchemeTools","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package provides tools for working with color schemes - gradients and color maps - and is designed to work with ColorSchemes.jl.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"You can extract colorschemes from images, and replace an image's color scheme with another. There are also functions for creating color schemes from pre-defined lists and Julia functions.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This package relies on:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Colors.jl\nColorSchemes.jl\nImages.jl\nClustering.jl\nInterpolations.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"and you might need image-capable Julia packages installed, depending on the OS.","category":"page"},{"location":"#Installation-and-basic-usage","page":"Introduction","title":"Installation and basic usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Install the package as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add ColorSchemeTools","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To use it:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using ColorSchemeTools","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Original version by cormullion.","category":"page"},{"location":"output/#Saving-colorschemes","page":"Saving colorschemes","title":"Saving colorschemes","text":"","category":"section"},{"location":"output/#Saving-colorschemes-as-images","page":"Saving colorschemes","title":"Saving colorschemes as images","text":"","category":"section"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"Sometimes you want to save a colorscheme, which is usually just a pixel thick, as a swatch or image. You can do this with colorscheme_to_image(). The second argument is the number of rows. The third argument is the number of times each pixel is repeated in the row. The function returns an image which you can save using FileIO's save():","category":"page"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"using FileIO, ColorSchemeTools, Images, Colors\n\n# 20 pixels for each color, 150 rows\nimg = colorscheme_to_image(ColorSchemes.vermeer, 150, 20)\n\nsave(\"/tmp/cs_vermeer-150-20.png\", img)","category":"page"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"(Image: \"vermeer swatch\")","category":"page"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"The image_to_swatch() function (a shortcut) extracts a n-color scheme from a supplied image and saves it as a swatch in a PNG.","category":"page"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"image_to_swatch(\"/tmp/input.png\", 10, \"/tmp/output.png\")","category":"page"},{"location":"output/#Saving-colorschemes-to-text-files","page":"Saving colorschemes","title":"Saving colorschemes to text files","text":"","category":"section"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"You can save a ColorScheme as a (Julia) text file with the imaginatively-titled colorscheme_to_text() function.","category":"page"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"Remember to make the name a Julia-friendly one, because it may eventually become a symbol and a dictionary key if the Julia file is include-d.","category":"page"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"colorscheme_to_text(ColorSchemes.vermeer,\n        \"the_lost_vermeer\",           # name\n        \"/tmp/the_lost_vermeer.jl\",   # filename\n        category=\"dutch painters\",    # category\n        notes=\"it's not really lost\"  # notes\n        )","category":"page"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"Of course, if you just want the color definitions, you can simply type:","category":"page"},{"location":"output/","page":"Saving colorschemes","title":"Saving colorschemes","text":"map(println, ColorSchemes.vermeer.colors);","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"DocTestSetup = quote\n    include(\"displayschemes.jl\")\n    using ColorSchemes, ColorSchemeTools, Colors\nend","category":"page"},{"location":"tools/#Extracting-colorschemes-from-images","page":"Tools","title":"Extracting colorschemes from images","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"You can extract a colorscheme from an image. For example, here's an image of a famous painting:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"(Image: \"the mona lisa\")","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Use the extract() function to create a color scheme from the original image:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"using ColorSchemeTools\nmonalisa = extract(\"monalisa.jpg\", 10, 15, 0.01; shrink=2)","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"which in this example creates a 10-color ColorScheme object (using 15 iterations and with a tolerance of 0.01; the image can be reduced in size, here by 2, before processing, to save time).","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"(Image: \"mona lisa extraction\")","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"ColorSchemes.ColorScheme(ColorTypes.RGB{Float64}[\n    RGB{Float64}(0.0406901,0.0412985,0.0423865),\n    RGB{Float64}(0.823493,0.611246,0.234261),\n    RGB{Float64}(0.374688,0.363066,0.182004),\n    RGB{Float64}(0.262235,0.239368,0.110915),\n    RGB{Float64}(0.614806,0.428448,0.112495),\n    RGB{Float64}(0.139384,0.124466,0.0715472),\n    RGB{Float64}(0.627381,0.597513,0.340734),\n    RGB{Float64}(0.955276,0.775304,0.37135),\n    RGB{Float64}(0.497517,0.4913,0.269587),\n    RGB{Float64}(0.880421,0.851357,0.538013),\n    RGB{Float64}(0.738879,0.709218,0.441082)\n    ], \"\", \"\")","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"(Extracting color schemes from images may require you to install image importing and exporting abilities. These are platform-specific.)","category":"page"},{"location":"tools/#Sorting-color-schemes","page":"Tools","title":"Sorting color schemes","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Use sortcolorscheme() to sort a scheme non-destructively in the LUV color space:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"using ColorSchemes\nsortcolorscheme(ColorSchemes.leonardo)\nsortcolorscheme(ColorSchemes.leonardo, rev=true)","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"The default is to sort colors by their LUV luminance value, but you could try specifying the :u or :v LUV fields instead (sorting colors is another problem domain not really addressed in this package...):","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"sortcolorscheme(ColorSchemes.leonardo, :u)","category":"page"},{"location":"tools/#Weighted-colorschemes","page":"Tools","title":"Weighted colorschemes","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Sometimes an image is dominated by some colors with others occurring less frequently. For example, there may be much more brown than yellow in a particular image. A weighted colorscheme derived from this image can reflect this. You can extract both a set of colors and a set of numerical values or weights that indicate the relative proportions of colors in the image.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"cs, wts = extract_weighted_colors(\"monalisa.jpg\", 10, 15, 0.01; shrink=2)","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"The ColorScheme is now in cs, and wts holds the various weights of each color:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"wts\n\n    10-element Array{Float64,1}:\n     0.0521126446851636\n     0.20025391828582884\n     0.08954703056671294\n     0.09603605342678319\n     0.09507086696018234\n     0.119987526821047\n     0.08042973071297582\n     0.08863381567908292\n     0.08599068966285295\n     0.09193772319937041","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"With the ColorScheme and the weights, you can make a new color scheme in which the more common colors take up more space in the scheme. Use colorscheme_weighted():","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"len = 50\ncolorscheme_weighted(cs, wts, len)","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Or in one go:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"colorscheme_weighted(extract_weighted_colors(\"monalisa.jpg\" # ...","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Compare the weighted and unweighted versions of schemes extracted from the Hokusai image \"The Great Wave\":","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"(Image: \"unweighted\")","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"(Image: \"weighted\")","category":"page"}]
}
